import java.io.*;
import java.util.*;

// -------------------- Part B & C Classes --------------------

// Student class for serialization
class Student implements Serializable {
    int studentID;
    String name;
    double grade;

    public Student(int studentID, String name, double grade) {
        this.studentID = studentID;
        this.name = name;
        this.grade = grade;
    }
}

// Employee class for file-based management
class Employee implements Serializable {
    String name;
    int id;
    String designation;
    double salary;

    public Employee(String name, int id, String designation, double salary) {
        this.name = name;
        this.id = id;
        this.designation = designation;
        this.salary = salary;
    }
}

// Custom ObjectOutputStream to append objects
class AppendableObjectOutputStream extends ObjectOutputStream {
    public AppendableObjectOutputStream(OutputStream out) throws IOException {
        super(out);
    }

    @Override
    protected void writeStreamHeader() throws IOException {
        File f = new File("employees.dat");
        if (f.length() == 0) {
            super.writeStreamHeader();
        } else {
            reset();
        }
    }
}

// -------------------- Main Program --------------------
public class CombinedJavaProgram {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String employeeFile = "employees.dat";

        while (true) {
            System.out.println("\n=== Java Program Menu ===");
            System.out.println("1. Sum Integers (Autoboxing/Unboxing)");
            System.out.println("2. Serialize & Deserialize Student");
            System.out.println("3. Employee Management System");
            System.out.println("4. Exit");
            System.out.print("Enter your choice: ");
            int choice = sc.nextInt();
            sc.nextLine(); // consume newline

            switch (choice) {
                case 1:
                    sumIntegers(sc);
                    break;
                case 2:
                    handleStudentSerialization(sc);
                    break;
                case 3:
                    employeeManagement(sc, employeeFile);
                    break;
                case 4:
                    System.out.println("Exiting program...");
                    sc.close();
                    System.exit(0);
                default:
                    System.out.println("Invalid choice! Try again.");
            }
        }
    }

    // -------------------- Part A --------------------
    public static void sumIntegers(Scanner sc) {
        ArrayList<Integer> numbers = new ArrayList<>();
        System.out.println("Enter integers separated by space:");
        String input = sc.nextLine();
        String[] tokens = input.split(" ");
        for (String token : tokens) {
            Integer num = Integer.parseInt(token); // autoboxing
            numbers.add(num);
        }

        int sum = 0;
        for (Integer num : numbers) {
            sum += num; // unboxing
        }
        System.out.println("Sum of integers: " + sum);
    }

    // -------------------- Part B --------------------
    public static void handleStudentSerialization(Scanner sc) {
        System.out.print("Enter Student ID: ");
        int id = sc.nextInt();
        sc.nextLine();
        System.out.print("Enter Student Name: ");
        String name = sc.nextLine();
        System.out.print("Enter Student Grade: ");
        double grade = sc.nextDouble();
        sc.nextLine();

        Student student = new Student(id, name, grade);

        // Serialization
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("student.dat"))) {
            oos.writeObject(student);
            System.out.println("Student object serialized to student.dat");
        } catch (IOException e) {
            e.printStackTrace();
        }

        // Deserialization
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream("student.dat"))) {
            Student deserialized = (Student) ois.readObject();
            System.out.println("Deserialized Student Data:");
            System.out.println("ID: " + deserialized.studentID);
            System.out.println("Name: " + deserialized.name);
            System.out.println("Grade: " + deserialized.grade);
        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
        }
    }

    // -------------------- Part C --------------------
    public static void employeeManagement(Scanner sc, String fileName) {
        while (true) {
            System.out.println("\n--- Employee Menu ---");
            System.out.println("1. Add Employee");
            System.out.println("2. Display All Employees");
            System.out.println("3. Back to Main Menu");
            System.out.print("Enter your choice: ");
            int choice = sc.nextInt();
            sc.nextLine();

            switch (choice) {
                case 1:
                    System.out.print("Enter Name: ");
                    String name = sc.nextLine();
                    System.out.print("Enter ID: ");
                    int id = sc.nextInt();
                    sc.nextLine();
                    System.out.print("Enter Designation: ");
                    String designation = sc.nextLine();
                    System.out.print("Enter Salary: ");
                    double salary = sc.nextDouble();
                    sc.nextLine();

                    Employee emp = new Employee(name, id, designation, salary);

                    try (FileOutputStream fos = new FileOutputStream(fileName, true);
                         ObjectOutputStream oos = new AppendableObjectOutputStream(fos)) {
                        oos.writeObject(emp);
                        System.out.println("Employee added successfully.");
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    break;

                case 2:
                    try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(fileName))) {
                        System.out.println("\n--- Employee Records ---");
                        while (true) {
                            Employee e = (Employee) ois.readObject();
                            System.out.println("ID: " + e.id + ", Name: " + e.name +
                                    ", Designation: " + e.designation + ", Salary: " + e.salary);
                        }
                    } catch (EOFException e) {
                        // End of file reached
                    } catch (IOException | ClassNotFoundException e) {
                        System.out.println("No records found.");
                    }
                    break;

                case 3:
                    return;

                default:
                    System.out.println("Invalid choice!");
            }
        }
    }
}
