import java.sql.*;
import java.util.Scanner;

// ------------------- Models -------------------
class Student {
    private int studentID;
    private String name;
    private String department;
    private double marks;

    public Student(int studentID, String name, String department, double marks) {
        this.studentID = studentID;
        this.name = name;
        this.department = department;
        this.marks = marks;
    }

    public int getStudentID() { return studentID; }
    public String getName() { return name; }
    public String getDepartment() { return department; }
    public double getMarks() { return marks; }

    public void setName(String name) { this.name = name; }
    public void setDepartment(String department) { this.department = department; }
    public void setMarks(double marks) { this.marks = marks; }

    @Override
    public String toString() {
        return studentID + "\t" + name + "\t" + department + "\t" + marks;
    }
}

// ------------------- Controllers -------------------
class StudentController {
    private Connection conn;

    public StudentController(Connection conn) {
        this.conn = conn;
    }

    public void addStudent(Student s) throws SQLException {
        String query = "INSERT INTO Student (StudentID, Name, Department, Marks) VALUES (?, ?, ?, ?)";
        try (PreparedStatement ps = conn.prepareStatement(query)) {
            ps.setInt(1, s.getStudentID());
            ps.setString(2, s.getName());
            ps.setString(3, s.getDepartment());
            ps.setDouble(4, s.getMarks());
            ps.executeUpdate();
        }
    }

    public void viewStudents() throws SQLException {
        String query = "SELECT * FROM Student";
        try (Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(query)) {
            System.out.println("ID\tName\tDepartment\tMarks");
            while (rs.next()) {
                System.out.println(rs.getInt("StudentID") + "\t" +
                        rs.getString("Name") + "\t" +
                        rs.getString("Department") + "\t" +
                        rs.getDouble("Marks"));
            }
        }
    }

    public void updateStudent(Student s) throws SQLException {
        String query = "UPDATE Student SET Name=?, Department=?, Marks=? WHERE StudentID=?";
        try (PreparedStatement ps = conn.prepareStatement(query)) {
            ps.setString(1, s.getName());
            ps.setString(2, s.getDepartment());
            ps.setDouble(3, s.getMarks());
            ps.setInt(4, s.getStudentID());
            ps.executeUpdate();
        }
    }

    public void deleteStudent(int studentID) throws SQLException {
        String query = "DELETE FROM Student WHERE StudentID=?";
        try (PreparedStatement ps = conn.prepareStatement(query)) {
            ps.setInt(1, studentID);
            ps.executeUpdate();
        }
    }
}

// ------------------- Main Program -------------------
public class UnifiedJDBCApp {
    static final String URL = "jdbc:mysql://localhost:3306/mydb"; // change DB name
    static final String USER = "root";
    static final String PASSWORD = "your_password";

    public static void main(String[] args) {
        try (Connection conn = DriverManager.getConnection(URL, USER, PASSWORD)) {
            Scanner sc = new Scanner(System.in);
            StudentController studentController = new StudentController(conn);

            while (true) {
                System.out.println("\n=== Unified JDBC Menu ===");
                System.out.println("1. Fetch Employees");
                System.out.println("2. Product CRUD Operations");
                System.out.println("3. Student Management (MVC)");
                System.out.println("4. Exit");
                System.out.print("Enter choice: ");
                int mainChoice = sc.nextInt();
                sc.nextLine();

                switch (mainChoice) {
                    case 1:
                        fetchEmployees(conn);
                        break;
                    case 2:
                        productCRUD(conn, sc);
                        break;
                    case 3:
                        studentManagement(studentController, sc);
                        break;
                    case 4:
                        System.out.println("Exiting...");
                        sc.close();
                        System.exit(0);
                    default:
                        System.out.println("Invalid choice!");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // ------------------- Part A: Fetch Employees -------------------
    public static void fetchEmployees(Connection conn) {
        String query = "SELECT EmpID, Name, Salary FROM Employee";
        try (Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(query)) {
            System.out.println("EmpID\tName\tSalary");
            while (rs.next()) {
                System.out.println(rs.getInt("EmpID") + "\t" +
                        rs.getString("Name") + "\t" +
                        rs.getDouble("Salary"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // ------------------- Part B: Product CRUD -------------------
    public static void productCRUD(Connection conn, Scanner sc) {
        try {
            conn.setAutoCommit(false); // transaction handling
            while (true) {
                System.out.println("\n--- Product CRUD ---");
                System.out.println("1. Add Product");
                System.out.println("2. View Products");
                System.out.println("3. Update Product");
                System.out.println("4. Delete Product");
                System.out.println("5. Back to Main Menu");
                System.out.print("Choice: ");
                int choice = sc.nextInt();
                sc.nextLine();

                switch (choice) {
                    case 1: // Add
                        System.out.print("Name: "); String name = sc.nextLine();
                        System.out.print("Price: "); double price = sc.nextDouble();
                        System.out.print("Quantity: "); int qty = sc.nextInt(); sc.nextLine();
                        String insertQuery = "INSERT INTO Product (ProductName, Price, Quantity) VALUES (?, ?, ?)";
                        try (PreparedStatement ps = conn.prepareStatement(insertQuery)) {
                            ps.setString(1, name); ps.setDouble(2, price); ps.setInt(3, qty);
                            ps.executeUpdate(); conn.commit();
                            System.out.println("Product added.");
                        } catch (SQLException e) { conn.rollback(); e.printStackTrace(); }
                        break;

                    case 2: // View
                        String selectQuery = "SELECT * FROM Product";
                        try (Statement stmt = conn.createStatement();
                             ResultSet rs = stmt.executeQuery(selectQuery)) {
                            System.out.println("ID\tName\tPrice\tQty");
                            while (rs.next()) {
                                System.out.println(rs.getInt("ProductID") + "\t" +
                                        rs.getString("ProductName") + "\t" +
                                        rs.getDouble("Price") + "\t" +
                                        rs.getInt("Quantity"));
                            }
                        }
                        break;

                    case 3: // Update
                        System.out.print("ProductID to update: "); int pid = sc.nextInt(); sc.nextLine();
                        System.out.print("New Name: "); String nname = sc.nextLine();
                        System.out.print("New Price: "); double nprice = sc.nextDouble();
                        System.out.print("New Quantity: "); int nqty = sc.nextInt(); sc.nextLine();
                        String updateQuery = "UPDATE Product SET ProductName=?, Price=?, Quantity=? WHERE ProductID=?";
                        try (PreparedStatement ps = conn.prepareStatement(updateQuery)) {
                            ps.setString(1, nname); ps.setDouble(2, nprice); ps.setInt(3, nqty); ps.setInt(4, pid);
                            ps.executeUpdate(); conn.commit(); System.out.println("Product updated.");
                        } catch (SQLException e) { conn.rollback(); e.printStackTrace(); }
                        break;

                    case 4: // Delete
                        System.out.print("ProductID to delete: "); int did = sc.nextInt(); sc.nextLine();
                        String deleteQuery = "DELETE FROM Product WHERE ProductID=?";
                        try (PreparedStatement ps = conn.prepareStatement(deleteQuery)) {
                            ps.setInt(1, did); ps.executeUpdate(); conn.commit();
                            System.out.println("Product deleted.");
                        } catch (SQLException e) { conn.rollback(); e.printStackTrace(); }
                        break;

                    case 5:
                        return;
                    default:
                        System.out.println("Invalid choice!");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // ------------------- Part C: Student MVC -------------------
    public static void studentManagement(StudentController controller, Scanner sc) {
        while (true) {
            System.out.println("\n--- Student Management ---");
            System.out.println("1. Add Student");
            System.out.println("2. View Students");
            System.out.println("3. Update Student");
            System.out.println("4. Delete Student");
            System.out.println("5. Back to Main Menu");
            System.out.print("Choice: ");
            int choice = sc.nextInt(); sc.nextLine();

            try {
                switch (choice) {
                    case 1:
                        System.out.print("ID: "); int id = sc.nextInt(); sc.nextLine();
                        System.out.print("Name: "); String name = sc.nextLine();
                        System.out.print("Dept: "); String dept = sc.nextLine();
                        System.out.print("Marks: "); double marks = sc.nextDouble(); sc.nextLine();
                        controller.addStudent(new Student(id, name, dept, marks));
                        System.out.println("Student added.");
                        break;
                    case 2:
                        controller.viewStudents();
                        break;
                    case 3:
                        System.out.print("ID to update: "); int uid = sc.nextInt(); sc.nextLine();
                        System.out.print("New Name: "); String uname = sc.nextLine();
                        System.out.print("New Dept: "); String udept = sc.nextLine();
                        System.out.print("New Marks: "); double umarks = sc.nextDouble(); sc.nextLine();
                        controller.updateStudent(new Student(uid, uname, udept, umarks));
                        System.out.println("Student updated.");
                        break;
                    case 4:
                        System.out.print("ID to delete: "); int did = sc.nextInt(); sc.nextLine();
                        controller.deleteStudent(did);
                        System.out.println("Student deleted.");
                        break;
                    case 5:
                        return;
                    default:
                        System.out.println("Invalid choice!");
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
}
